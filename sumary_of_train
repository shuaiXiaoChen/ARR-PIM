
    1:run from predict.py
    Finding best f1-score by searching for threshold..
    Results using epsilon method:
     {'f1': 0.8891039694683346, 'precision': 0.8003565038610917, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25013.0, 'FP': 672.0, 'FN': 0.0, 'threshold': 0.2214964386075735, 'latency': 3.374957813027337, 'reg_level': 1}
    Results using peak-over-threshold method:
     {'f1': 0.73980036190652, 'precision': 0.5870560022073306, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23790.0, 'FP': 1895.0, 'FN': 0.0, 'threshold': 0.1455264777897374, 'latency': 0.999987500156248}
    Results using best f1 score search:
     {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.6866000000000007, 'latency': 23.999700003749954}
    -- Done.
    2:run from train.py
    0
28379
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8693077641286848, 'precision': 0.7688356142441906, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24875.0, 'FP': 810.0, 'FN': 0.0, 'threshold': 0.20914266584441066, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7227318009770783, 'precision': 0.5658475098385896, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23618.0, 'FP': 2067.0, 'FN': 0.0, 'threshold': 0.13793518343241556, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7065000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/02062024_212831/<train/test>_output.pkl
-- Done.

3.run from train.py
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8864708759618196, 'precision': 0.7960992884276026, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24995.0, 'FP': 690.0, 'FN': 0.0, 'threshold': 0.21647586347535253, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7256519400529935, 'precision': 0.5694356360823597, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23648.0, 'FP': 2037.0, 'FN': 0.0, 'threshold': 0.14201026526235364, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.6866000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/02062024_231901/<train/test>_output.pkl
-- Done.
4.run from train.py
0
28379
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8742446300452199, 'precision': 0.7765926757665244, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24910.0, 'FP': 775.0, 'FN': 0.0, 'threshold': 0.22997295716777444, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7695996054781888, 'precision': 0.6254933814128317, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24072.0, 'FP': 1613.0, 'FN': 0.0, 'threshold': 0.1610521083088397, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/03062024_120303/<train/test>_output.pkl
-- Done.

5.run from train.py with adj_1
0
28379
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8630417032498666, 'precision': 0.7590870646404985, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24830.0, 'FP': 855.0, 'FN': 0.0, 'threshold': 0.2336449697613716, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7532456868040979, 'precision': 0.6041713375102684, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23920.0, 'FP': 1765.0, 'FN': 0.0, 'threshold': 0.16608320232630755, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9996239388025846, 'precision': 0.9992581565309415, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25683.0, 'FP': 2.0, 'FN': 0.0, 'threshold': 0.8259000000000009, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/07062024_141334/<train/test>_output.pkl
-- Done.

6.run from train.py with adj_1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8544194610340118, 'precision': 0.7458471740148195, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24767.0, 'FP': 918.0, 'FN': 0.0, 'threshold': 0.22053312184289098, 'latency': 3.2499593755078062, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.721087464135307, 'precision': 0.5638342390878313, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23601.0, 'FP': 2084.0, 'FN': 0.0, 'threshold': 0.1529572185104353, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/07062024_154812/<train/test>_output.pkl
-- Done.

7.run from train.py with adj_1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.855912495865381, 'precision': 0.7481255186111482, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24778.0, 'FP': 907.0, 'FN': 0.0, 'threshold': 0.22053253650665283, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.762520046330735, 'precision': 0.6161939601642408, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24007.0, 'FP': 1678.0, 'FN': 0.0, 'threshold': 0.16754853707237635, 'latency': 3.2499593755078062}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/07062024_224823/<train/test>_output.pkl
-- Done.

8.run from train.py with adj_1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8578202854369933, 'precision': 0.7510454397796336, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24792.0, 'FP': 893.0, 'FN': 0.0, 'threshold': 0.21303656930103898, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7047697963050084, 'precision': 0.544132497386119, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23428.0, 'FP': 2257.0, 'FN': 0.0, 'threshold': 0.1470384873298412, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/08062024_101703/<train/test>_output.pkl

9.run from train.py with adj_1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8553689707637759, 'precision': 0.7472954209506368, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24774.0, 'FP': 911.0, 'FN': 0.0, 'threshold': 0.2314606737345457, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7884061083141343, 'precision': 0.6507246361093608, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24239.0, 'FP': 1446.0, 'FN': 0.0, 'threshold': 0.18284385747048834, 'latency': 3.374957813027337}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/08062024_142132/<train/test>_output.pkl
-- Done.

10.run from train.py with adj_1
Results using epsilon method:
 {'f1': 0.8379422515891811, 'precision': 0.7210920751576764, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24643.0, 'FP': 1042.0, 'FN': 0.0, 'threshold': 0.21518004778772593, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7245784865514251, 'precision': 0.5681147183295767, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23637.0, 'FP': 2048.0, 'FN': 0.0, 'threshold': 0.1565944597882864, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8259000000000009, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/08062024_160801/<train/test>_output.pkl
-- Done.

11.run from train.py with adj_1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8649814425439358, 'precision': 0.762093350036511, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24844.0, 'FP': 841.0, 'FN': 0.0, 'threshold': 0.22118264809250832, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7400035766015203, 'precision': 0.587311967326549, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23792.0, 'FP': 1893.0, 'FN': 0.0, 'threshold': 0.15649826090711377, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.999438513291472, 'precision': 0.9988876492440205, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25682.0, 'FP': 3.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/08062024_232052/<train/test>_output.pkl
-- Done.

12.run from train.py with adj_1
Results using epsilon method:
 {'f1': 0.8431876085949974, 'precision': 0.7288961019239824, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24683.0, 'FP': 1002.0, 'FN': 0.0, 'threshold': 0.22174039110541344, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7547228515862991, 'precision': 0.6060742393564135, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23934.0, 'FP': 1751.0, 'FN': 0.0, 'threshold': 0.16649384530490458, 'latency': 3.2499593755078062}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/09062024_104158/<train/test>_output.pkl
-- Done.

13.run from train.py with adj_1
Results using epsilon method:
 {'f1': 0.8578202854369933, 'precision': 0.7510454397796336, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24792.0, 'FP': 893.0, 'FN': 0.0, 'threshold': 0.2103870352730155, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7056004603343426, 'precision': 0.545123430705942, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23437.0, 'FP': 2248.0, 'FN': 0.0, 'threshold': 0.1488226080485728, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/10062024_150103/<train/test>_output.pkl
-- Done.

14.run from train.py with adj_1
 {'f1': 0.8498373813773069, 'precision': 0.7388919343420407, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24733.0, 'FP': 952.0, 'FN': 0.0, 'threshold': 0.23674471862614155, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7702597363435804, 'precision': 0.6263659599479983, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24078.0, 'FP': 1607.0, 'FN': 0.0, 'threshold': 0.17546436723708533, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/10062024_161431/<train/test>_output.pkl
-- Done.

15.run from train.py with adj_1
 {'f1': 0.8606979696958851, 'precision': 0.7554683097154562, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24813.0, 'FP': 872.0, 'FN': 0.0, 'threshold': 0.22515709791332483, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.758654821644912, 'precision': 0.6111615231144248, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23971.0, 'FP': 1714.0, 'FN': 0.0, 'threshold': 0.16348405699311702, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7861000000000008, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/10062024_173507/<train/test>_output.pkl

16.run from train.py with adj_1
Results using epsilon method:
 {'f1': 0.8172255604475483, 'precision': 0.6909463947398143, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24480.0, 'FP': 1205.0, 'FN': 0.0, 'threshold': 0.2217875011265278, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7579077962037477, 'precision': 0.6101925240992242, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23964.0, 'FP': 1721.0, 'FN': 0.0, 'threshold': 0.17558516359942913, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8259000000000009, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/14062024_133136/<train/test>_output.pkl

17.run from train.py with adj_1
Results using epsilon method:
 {'f1': 0.8248573676480224, 'precision': 0.7019280857167064, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24541.0, 'FP': 1144.0, 'FN': 0.0, 'threshold': 0.2162192203104496, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7463590819121986, 'precision': 0.5953591147063887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23854.0, 'FP': 1831.0, 'FN': 0.0, 'threshold': 0.17086839590646039, 'latency': 3.2499593755078062}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8259000000000009, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/14062024_155920/<train/test>_output.pkl
-- Done.

18.run from train.py with adj_1
 {'f1': 0.8634566289356739, 'precision': 0.7597292702771312, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24833.0, 'FP': 852.0, 'FN': 0.0, 'threshold': 0.2226967215538025, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.749056900451649, 'precision': 0.5987997319430991, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23880.0, 'FP': 1805.0, 'FN': 0.0, 'threshold': 0.15698470629220812, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/14062024_185114/<train/test>_output.pkl
-- Done.

19.run from train.py with adj_1
 {'f1': 0.8538778299048991, 'precision': 0.7450221218334565, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24763.0, 'FP': 922.0, 'FN': 0.0, 'threshold': 0.21148323267698288, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7455328891771519, 'precision': 0.5943084037187109, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23846.0, 'FP': 1839.0, 'FN': 0.0, 'threshold': 0.1591079449117931, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7861000000000008, 'latency': 51.9993500081249}
Saving output to output/SMD/1-1/14062024_201952/<train/test>_output.pkl
-- Done.

19.run from train.py without adj_1(only source) with epoch = 30
 {'f1': 0.8121748543965992, 'precision': 0.6837563434422428, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24439.0, 'FP': 1246.0, 'FN': 0.0, 'threshold': 0.17290113493800163, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5905263061538567, 'precision': 0.41897356077920134, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21949.0, 'FP': 3736.0, 'FN': 0.0, 'threshold': 0.1280317283227017, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/18062024_171358/<train/test>_output.pkl
-- Done.

20.run from train.py without adj_1 with epoch = 3
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8669299208461284, 'precision': 0.765123542274571, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24858.0, 'FP': 827.0, 'FN': 0.0, 'threshold': 0.20497151743620634, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7294835848957927, 'precision': 0.5741687967302456, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23687.0, 'FP': 1998.0, 'FN': 0.0, 'threshold': 0.14374773086446674, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.6866000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/18062024_172012/<train/test>_output.pkl
-- Done.

21.run from train.py with adj_1 with epoch = 3
Results using epsilon method:
 {'f1': 0.8544194610340118, 'precision': 0.7458471740148195, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24767.0, 'FP': 918.0, 'FN': 0.0, 'threshold': 0.21922525763511658, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6713974073988864, 'precision': 0.5053460879659613, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23048.0, 'FP': 2637.0, 'FN': 0.0, 'threshold': 0.1637774096144066, 'latency': 2.1249734378320273}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/18062024_172527/<train/test>_output.pkl
-- Done.

22.run from train.py with adj_1 with epoch = 80

Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.7043091608302753, 'precision': 0.5435835340121398, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23423.0, 'FP': 2262.0, 'FN': 0.0, 'threshold': 0.14238469768315554, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.47233793598217577, 'precision': 0.30919315929164104, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19666.0, 'FP': 6019.0, 'FN': 0.0, 'threshold': 0.11083816719743361, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/18062024_172736/<train/test>_output.pkl
-- Done.

23.run from train.py without adj_1 while epoch = 80
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.3388011847434625, 'precision': 0.20395185085627085, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 15170.0, 'FP': 10515.0, 'FN': 0.0, 'threshold': 0.08329308405518532, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.47151122897470454, 'precision': 0.3084850563283121, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19646.0, 'FP': 6039.0, 'FN': 0.0, 'threshold': 0.1302972683692611, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7861000000000008, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/18062024_203123/<train/test>_output.pkl

24.run from train.py with adj_1 and test_adaption while epoch = 8
Results using epsilon method:
 {'f1': 0.8232189887505214, 'precision': 0.6995585544026004, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24528.0, 'FP': 1157.0, 'FN': 0.0, 'threshold': 0.19500800082460046, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.73166293002549, 'precision': 0.57687366043496, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23709.0, 'FP': 1976.0, 'FN': 0.0, 'threshold': 0.15410283729649152, 'latency': 1.1249859376757791}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_150703/<train/test>_output.pkl
-- Done.

25.run from train.py with and test_adaption adj_1 while epoch = 30
Results using epsilon method:
 {'f1': 0.7853034923039216, 'precision': 0.6465082777861573, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24212.0, 'FP': 1473.0, 'FN': 0.0, 'threshold': 0.17163258139044046, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5402005877875473, 'precision': 0.37005494454662785, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21099.0, 'FP': 4586.0, 'FN': 0.0, 'threshold': 0.12553378962519363, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/26062024_151122/<train/test>_output.pkl
-- Done.

26.run from train.py with adj_1 and test_adaption  while epoch = 50
Results using epsilon method:
 {'f1': 0.764142205508589, 'precision': 0.6183153531826593, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24022.0, 'FP': 1663.0, 'FN': 0.0, 'threshold': 0.17734788684174418, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.49236583888279567, 'precision': 0.3265850402150745, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 20130.0, 'FP': 5555.0, 'FN': 0.0, 'threshold': 0.13121698252089462, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_151744/<train/test>_output.pkl
-- Done.

27.run from train.py with adj_1 and test_adaption while epoch = 80
Results using epsilon method:
 {'f1': 0.6902337562702413, 'precision': 0.5269953041334208, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23267.0, 'FP': 2418.0, 'FN': 0.0, 'threshold': 0.1595309772528708, 'latency': 0.124998437519531, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.45940983012683745, 'precision': 0.29820677407769897, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19345.0, 'FP': 6340.0, 'FN': 0.0, 'threshold': 0.1179637804191959, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_152907/<train/test>_output.pkl
-- Done.

28.run from train.py with adj_1 and test_adaption while epoch = 3
Results using epsilon method:
 {'f1': 0.8633182760509827, 'precision': 0.7595150810275865, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24832.0, 'FP': 853.0, 'FN': 0.0, 'threshold': 0.21107644215226173, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6759458432842469, 'precision': 0.5105173384299463, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23102.0, 'FP': 2583.0, 'FN': 0.0, 'threshold': 0.1602520800437512, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_154357/<train/test>_output.pkl
-- Done.

29.run from train.py with adj_1 and test_adaption while epoch = 1
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8529316259661799, 'precision': 0.7435826642462526, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24756.0, 'FP': 929.0, 'FN': 0.0, 'threshold': 0.3075935114175081, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.8021390075784941, 'precision': 0.6696495136225465, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24356.0, 'FP': 1329.0, 'FN': 0.0, 'threshold': 0.256771624196424, 'latency': 3.374957813027337}
Results using best f1 score search:
 {'f1': 0.9994381000829431, 'precision': 0.9996286632022701, 'recall': 0.9992576057934015, 'TP': 2692.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 2.0, 'threshold': 0.925400000000001, 'latency': 152.5692490107284}
Saving output to output/SMD/1-1/26062024_154817/<train/test>_output.pkl
-- Done.

30.run from train.py with adj_1 and test_adaption while epoch = 2
Results using epsilon method:
 {'f1': 0.8507767287571617, 'precision': 0.7403132708427774, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24740.0, 'FP': 945.0, 'FN': 0.0, 'threshold': 0.22014728002250195, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7182038728863654, 'precision': 0.560316138601672, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23571.0, 'FP': 2114.0, 'FN': 0.0, 'threshold': 0.17183049451222368, 'latency': 2.4999687503906203}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7861000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_155036/<train/test>_output.pkl
-- Done.

31.run from train.py with adj_1 and test_adaption while epoch = 4
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8722631700871494, 'precision': 0.7734711433434649, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24896.0, 'FP': 789.0, 'FN': 0.0, 'threshold': 0.21174031123518944, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6365741088069753, 'precision': 0.46689774615788954, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22609.0, 'FP': 3076.0, 'FN': 0.0, 'threshold': 0.1476608083039541, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7065000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_155607/<train/test>_output.pkl
-- Done.
32.run from train.py with and test_adaption adj_1 while epoch = 5
 {'f1': 0.8464994356756523, 'precision': 0.7338599816566058, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24708.0, 'FP': 977.0, 'FN': 0.0, 'threshold': 0.2053427528589964, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7152482908310156, 'precision': 0.5567265952537165, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23540.0, 'FP': 2145.0, 'FN': 0.0, 'threshold': 0.1573378270038696, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_155755/<train/test>_output.pkl
-- Done.

33.run from train.py with adj_1 and test_adaption while epoch = 6
Results using epsilon method:
 {'f1': 0.8434516008185087, 'precision': 0.7292907397691101, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24685.0, 'FP': 1000.0, 'FN': 0.0, 'threshold': 0.20497592771425843, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7367654798395975, 'precision': 0.5832431249550918, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23760.0, 'FP': 1925.0, 'FN': 0.0, 'threshold': 0.15103799435825166, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_160008/<train/test>_output.pkl
-- Done.\

34.run from train.py with adj_1 and test_adaption while epoch = 7
Results using epsilon method:
 {'f1': 0.8598738059543528, 'precision': 0.7541993259960825, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24807.0, 'FP': 878.0, 'FN': 0.0, 'threshold': 0.20352901984006166, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6862774926689535, 'precision': 0.5223967412790446, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23222.0, 'FP': 2463.0, 'FN': 0.0, 'threshold': 0.14444881880797378, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7065000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_160418/<train/test>_output.pkl
-- Done.

35.run from train.py with adj_1 and test_adaption while epoch = 8
Results using epsilon method:
 {'f1': 0.8400325434968087, 'precision': 0.7241935464403398, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24659.0, 'FP': 1026.0, 'FN': 0.0, 'threshold': 0.2019548863172531, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.7437832886505384, 'precision': 0.59208791078662, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23829.0, 'FP': 1856.0, 'FN': 0.0, 'threshold': 0.15402227173155153, 'latency': 0.999987500156248}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_160710/<train/test>_output.pkl
-- Done.

36.run from train.py with adj_1 and test_adaption while epoch = 9
Results using epsilon method:
 {'f1': 0.8439800814936076, 'precision': 0.730081298834468, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24689.0, 'FP': 996.0, 'FN': 0.0, 'threshold': 0.19265875266864896, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6669923342154839, 'precision': 0.5003714700958926, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22995.0, 'FP': 2690.0, 'FN': 0.0, 'threshold': 0.1365152463331824, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 51.9993500081249}
Saving output to output/SMD/1-1/26062024_161144/<train/test>_output.pkl
-- Done.

37.run from train.py with adj_1 and test_adaption while epoch = 10
Results using epsilon method:
 {'f1': 0.8286632463749788, 'precision': 0.7074579813354569, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24571.0, 'FP': 1114.0, 'FN': 0.0, 'threshold': 0.18727454543113708, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6395967875489005, 'precision': 0.4701570672423088, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22649.0, 'FP': 3036.0, 'FN': 0.0, 'threshold': 0.13668054218633524, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_162029/<train/test>_output.pkl
-- Done.

38.run from train.py with adj_1 and test_adaption while epoch = 20
Results using epsilon method:
 {'f1': 0.8129100790372794, 'precision': 0.6847991848378261, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24445.0, 'FP': 1240.0, 'FN': 0.0, 'threshold': 0.18041021889075637, 'latency': 2.1249734378320273, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5634174722979481, 'precision': 0.3921968257501866, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21510.0, 'FP': 4175.0, 'FN': 0.0, 'threshold': 0.12954288867260733, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/26062024_162600/<train/test>_output.pkl
-- Done.

39.run from train.py with adj_1 and test_adaption while epoch = 30
Results using epsilon method:
 {'f1': 0.7762522715805763, 'precision': 0.6343301138819635, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24132.0, 'FP': 1553.0, 'FN': 0.0, 'threshold': 0.17970592295750976, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5451746227352706, 'precision': 0.3747391843444997, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21190.0, 'FP': 4495.0, 'FN': 0.0, 'threshold': 0.12915408701947634, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_163152/<train/test>_output.pkl
-- Done.

40.run from train.py with adj_1 and test_adaption while epoch = 40
Results using epsilon method:
 {'f1': 0.7764760085118488, 'precision': 0.6346289737700143, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24134.0, 'FP': 1551.0, 'FN': 0.0, 'threshold': 0.17422219086438417, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.598330064122471, 'precision': 0.4268737118889658, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22068.0, 'FP': 3617.0, 'FN': 0.0, 'threshold': 0.12756668371123353, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_170013/<train/test>_output.pkl
-- Done.

50.run from train.py with adj_1 and test_adaption while epoch = 50
Results using epsilon method:
 {'f1': 0.5509162526641934, 'precision': 0.3801862822746454, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21293.0, 'FP': 4392.0, 'FN': 0.0, 'threshold': 0.14860737044364214, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4358836545917998, 'precision': 0.2786800452273921, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 18712.0, 'FP': 6973.0, 'FN': 0.0, 'threshold': 0.11882292601644931, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8657000000000009, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/26062024_171616/<train/test>_output.pkl
-- Done.

60.run from train.py with adj_1 and test_adaption while epoch = 60
Results using epsilon method:
 {'f1': 0.7386846731191586, 'precision': 0.5856521726398866, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23779.0, 'FP': 1906.0, 'FN': 0.0, 'threshold': 0.1742400201037526, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.464039153591223, 'precision': 0.30211954659401197, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19462.0, 'FP': 6223.0, 'FN': 0.0, 'threshold': 0.12352496290776482, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/26062024_180724/<train/test>_output.pkl
-- Done.

70.run from train.py sith adj_1 and test_adaption while epoch = 70
Results using epsilon method:
 {'f1': 0.7114703912755844, 'precision': 0.5521623272142605, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23500.0, 'FP': 2185.0, 'FN': 0.0, 'threshold': 0.15808252897113562, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4724621921337795, 'precision': 0.30929965521320363, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19669.0, 'FP': 6016.0, 'FN': 0.0, 'threshold': 0.12412644705031116, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/26062024_181857/<train/test>_output.pkl
-- Done.

80.run from train.py with adj_1 and test_adaption while epoch = 80
Results using epsilon method:
 {'f1': 0.6654271994145575, 'precision': 0.49861188136477536, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22976.0, 'FP': 2709.0, 'FN': 0.0, 'threshold': 0.1638724966906011, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4334988969516617, 'precision': 0.27673343577120346, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 18644.0, 'FP': 7041.0, 'FN': 0.0, 'threshold': 0.12066400545653816, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7662000000000008, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_183400/<train/test>_output.pkl
-- Done.

90.run from train.py with adj_1 and test_adaption while epoch = 90
Results using epsilon method:
 {'f1': 0.35337808312333335, 'precision': 0.21461005320273238, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 15826.0, 'FP': 9859.0, 'FN': 0.0, 'threshold': 0.08357876352965832, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.530415475406616, 'precision': 0.36093247540067996, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 20915.0, 'FP': 4770.0, 'FN': 0.0, 'threshold': 0.12156658238778516, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 51.74935313308584}
Saving output to output/SMD/1-1/26062024_185010/<train/test>_output.pkl
-- Done.

100.run from train.py with adj_1 and test_adaption while epoch = 100
Results using epsilon method:
 {'f1': 0.3339089681010243, 'precision': 0.2004166045228265, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 14937.0, 'FP': 10748.0, 'FN': 0.0, 'threshold': 0.07772418297827244, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4875098845614776, 'precision': 0.3223259149050898, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 20021.0, 'FP': 5664.0, 'FN': 0.0, 'threshold': 0.12272326951896993, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 51.9993500081249}
Saving output to output/SMD/1-1/26062024_192351/<train/test>_output.pkl
-- Done.

100.run from train.py without adj_1 and with test_adaption while epoch = 100
 {'f1': 0.454449928661297, 'precision': 0.2940406021676047, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19217.0, 'FP': 6468.0, 'FN': 0.0, 'threshold': 0.11372396210208535, 'latency': 0.0, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5414491705561761, 'precision': 0.3712277795628665, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21122.0, 'FP': 4563.0, 'FN': 0.0, 'threshold': 0.1302910534727943, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.8060000000000008, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_195410/<train/test>_output.pkl
-- Done.

100.run from train.py without adj_1 and without test_adaption while epoch = 100
Results using epsilon method:
 {'f1': 0.7090360846952395, 'precision': 0.5492354728863701, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 23474.0, 'FP': 2211.0, 'FN': 0.0, 'threshold': 0.1592860664241016, 'latency': 0.124998437519531, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4554487219861018, 'precision': 0.2948774077332778, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 19243.0, 'FP': 6442.0, 'FN': 0.0, 'threshold': 0.1186661113799048, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_201204/<train/test>_output.pkl
-- Done.

ablation----run from train.py without adj_1 and without test_adaption while epoch = 30
Finding best f1-score by searching for threshold..
Results using epsilon method:
 {'f1': 0.8295563436446576, 'precision': 0.7087608505425917, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24578.0, 'FP': 1107.0, 'FN': 0.0, 'threshold': 0.1732048513367772, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6444932380529985, 'precision': 0.4754677012434386, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22713.0, 'FP': 2972.0, 'FN': 0.0, 'threshold': 0.12808999427791654, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 23.999700003749954}
Saving output to output/SMD/1-1/26062024_203340/<train/test>_output.pkl
-- Done.

ablation----run from train.py with adj_1 and without test_adaption while epoch = 30
Results using epsilon method:
 {'f1': 0.6460387903751702, 'precision': 0.47715196514850877, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22733.0, 'FP': 2952.0, 'FN': 0.0, 'threshold': 0.15415118355304003, 'latency': 0.124998437519531, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.4352850087488974, 'precision': 0.2781908299481714, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 18695.0, 'FP': 6990.0, 'FN': 0.0, 'threshold': 0.11903358462658155, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 52.24934688316396}
Saving output to output/SMD/1-1/26062024_204006/<train/test>_output.pkl
-- Done.

ablation----run from train.py without adj_1 and with test_adaption while epoch = 30
Results using epsilon method:
 {'f1': 0.8389860955805722, 'precision': 0.7226394830401301, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24651.0, 'FP': 1034.0, 'FN': 0.0, 'threshold': 0.1701233321800828, 'latency': 2.1249734378320273, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.5556317498190909, 'precision': 0.38469227419007246, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 21376.0, 'FP': 4309.0, 'FN': 0.0, 'threshold': 0.12201174060120687, 'latency': 0.0}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7463000000000007, 'latency': 52.374345320683496}
Saving output to output/SMD/1-1/26062024_204859/<train/test>_output.pkl
-- Done.

ablation----run from train.py with adj_1 and with test_adaption while epoch = 30
Results using epsilon method:
 {'f1': 0.787829701520994, 'precision': 0.6499396848011105, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 24234.0, 'FP': 1451.0, 'FN': 0.0, 'threshold': 0.18129877047613263, 'latency': 3.374957813027337, 'reg_level': 1}
Results using peak-over-threshold method:
 {'f1': 0.6210908173067666, 'precision': 0.4504263493555821, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 22398.0, 'FP': 3287.0, 'FN': 0.0, 'threshold': 0.13006771810688925, 'latency': 0.124998437519531}
Results using best f1 score search:
 {'f1': 0.9998094331303373, 'precision': 0.999628938776887, 'recall': 0.9999999962880475, 'TP': 2694.0, 'TN': 25684.0, 'FP': 1.0, 'FN': 0.0, 'threshold': 0.7264000000000007, 'latency': 52.12434844564443}
Saving output to output/SMD/1-1/26062024_205524/<train/test>_output.pkl
-- Done.